package constants;

public class Constants {

	public static String CLE_COUNT_EXCEPTION = " SELECT iface.interfacename, cf_exp.exceptioncode, app_ex.msg, count(1) "
			+ " from cle_owner.app_exception app_ex, cle_owner.cf_interface iface, cle_owner.cf_application application, cle_owner.cf_exception cf_exp "
			+ " where app_ex.exception_timestamp between trunc(sysdate-15) and trunc(sysdate) "
			+ " and app_ex.interfaceid = iface.interfaceid "
			+ " and iface.appid = application.appid "
			+ " and cf_exp.exceptionid = app_ex.exceptionid "
			+ " and application.appcode in ('STERLING') and iface.interfacecode in ('POCOMPOSITERECEIVE','POCOMPOSITEUPDATE','POCREATE','PORECEIVE','POUPDATE') "
			+ " and app_ex.statusflag = 'Open' "
			+ " GROUP BY iface.interfacename, cf_exp.exceptioncode, app_ex.msg "
			+ " ORDER BY iface.interfacename ";

	public static String CLE_RECEIVE_EXCEPTION = " SELECT to_char(app_ex.exception_timestamp,'YYYY-MM-DD HH24:MI:SS') TIME_STAMP "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POReceive/Receipt/@ReceiptDate') as xml_ReceiptDate "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POReceive/Receipt/@ReceivingNode') as xml_ReceivingNode "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POReceive/Receipt/ReceiptLines/ReceiptLine[1]/@OrderNo') as xml_OrderNo "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POReceive/Receipt/ReceiptLines/ReceiptLine[1]/@ItemID') as xml_ItemID "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POReceive/Receipt/ReceiptLines/ReceiptLine[1]/@PrimeLineNo') as xml_PrimeLineNo "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POReceive/Receipt/ReceiptLines/ReceiptLine[1]/@Quantity') as xml_Quantity "
			+ " , app_ex.transactionid PO_NUMBER "
			+ " , iface.interfacename, app_ex.msg, app_ex.appexceptionid , app_ex.payloadid, DBMS_LOB.substr(payload.payload, 4000) PAYLOAD "
			+ " from cle_owner.app_exception app_ex, cle_owner.cf_interface iface, cle_owner.cf_application application, cle_owner.app_payloadarchive payload "
			+ " where app_ex.exception_timestamp between trunc(sysdate-15) and trunc(sysdate) "
			+ " and app_ex.interfaceid = iface.interfaceid "
			+ " and iface.appid = application.appid "
			+ " and payload.payloadid = app_ex.payloadid "
			+ " and application.appcode in ('STERLING') "
			+ " and iface.interfacecode in ('POCOMPOSITERECEIVE','PORECEIVE') "
			+ " and app_ex.statusflag = 'Open' "
			+ " ORDER BY iface.interfacename ";

	public static String STR_PO_DATA_4_RECEIVE = " select * from (SELECT DISTINCT TMP.INTERFACENAME, TMP.MSG "
			+ " , TMP.PO_NUMBER, TMP.XML_ITEMID, TMP.XML_PRIMELINENO, TMP.XML_QUANTITY, TMP.XML_RECEIVINGNODE "
			+ " , ORD.ORDERED_QTY STR_ORDERED_QTY, ORD.STATUS_QUANTITY, ORD.STATUS "
			+ " , TMP.PAYLOADID , '<API FlowName=\"ProcessPOReceive\"><Input>' || DBMS_LOB.SUBSTR(TMP.PAYLOAD_XML,4000) || '</Input></API>'"
			+ " FROM "
			+ " (select temp.* from PO_EXP_REPROCESS_RECEIVE_1 temp "
			+ " ) TMP "
			+ " LEFT JOIN "
			+ " (select oh.order_no, ol.prime_line_no, ol.ordered_qty, st.description status, ol.item_id, ors.status_quantity "
			+ " from yantra_owner.yfs_order_header oh, yantra_owner.yfs_order_release_status ors, yantra_owner.yfs_order_line ol, yantra_owner.yfs_status st "
			+ " where oh.order_header_key = ors.order_header_key "
			+ " and ol.order_header_key = oh.order_header_key "
			+ " and ol.order_line_key = ors.order_line_key "
			+ " and ors.status = st.status "
			+ " and st.process_type_key = 'PO_FULFILLMENT' and ors.status_quantity > 0 "
			+ " ) ORD "
			+ " ON ORD.ORDER_NO = TMP.XML_ORDERNO "
			+ " AND trim(ORD.ITEM_ID) = TMP.XML_ITEMID "
			+ " AND ORD.PRIME_LINE_NO = TMP.XML_PRIMELINENO ) "
			+ " WHERE "
			+ " STATUS IN ('Created', 'Manually Allocated', 'Included in Shipment') "
			+ " And STATUS is not null ";

	public static String WSI_PO_STER_RMS_DATA_1 = " CREATE TABLE WSI_PO_STER_RMS_DATA_1 AS  "
			+ " SELECT a.order_type,  "
			+ " a.order_no,  "
			+ " trim(b.item_id) ITEM_ID,  "
			+ " trim(b.receiving_node) node,  "
			+ " c.status_quantity,  "
			+ " C.STATUS,  "
			+ " CASE  "
			+ " WHEN c.status < '3900' THEN 'OPEN'  "
			+ " WHEN C.STATUS = '9000' THEN 'CANCEL'  "
			+ " WHEN C.STATUS = '3900' THEN 'RECEIVED'  "
			+ " ELSE 'ERROR'  "
			+ " END AS STATUS_1,  "
			+ " C.modifyts,  "
			+ " b.prime_line_no,  "
			+ " b.sub_line_no,  "
			+ " b.ordered_qty,  "
			+ " b.order_line_key,  "
			+ " b.order_header_key,  "
			+ " TO_CHAR(b.EARLIEST_DELIVERY_DATE,'dd-MON-yy') EARLIEST_DELIVERY_DATE,  "
			+ " TO_CHAR(b.REQ_DELIVERY_DATE,'dd-MON-yy') REQUESTED_DELIVERY_DATE,  "
			+ " sch.expected_delivery_date,  "
			+ " rms.ORDER_NO ORDER_NO_1,  "
			+ " RMS.ITEM,  "
			+ " RMS.WH_NAME,  "
			+ " RMS.QTY_ORDERED,  "
			+ " RMS.QTY_RECEIVED,  "
			+ " RMS.QTY_OPEN,  "
			+ " RMS.REV_ETA_DATE,  "
			+ " RMS.QTY_CANCELLED  "
			+ " FROM yfs_order_header a,  "
			+ " yfs_order_line b,  "
			+ " yfs_order_release_status c,  "
			+ " yfs_order_line_schedule sch,  "
			+ " WSI_PO_RMS_UPDATE_1 rms  "
			+ " WHERE a.order_header_key =b.order_header_key  "
			+ " AND a.order_header_key =c.order_header_key  "
			+ " AND b.order_line_key =c.order_line_key  "
			+ " AND sch.order_line_schedule_key=c.order_line_schedule_key  "
			+ " AND a.order_no =rms.order_no  "
			+ " AND trim(b.item_id) =rms.item  "
			+ " and b.receiving_node like SUBSTR(replace(WH_NAME, chr(32), ''),3) || '%'  "
			+ " AND c.STATUS_QUANTITY > 0  ";

	public static String WSI_PO_QTY_STER_RMS_1 = " CREATE TABLE WSI_PO_QTY_STER_RMS_1 AS  "
			+ " SELECT distinct a.order_header_key, a.order_line_key,D.ORDER_NO,D.ITEM_ID, D.NODE, D.STATUS_1, D.SUM_QUANTITY,A.ordered_qty,A.STATUS_QUANTITY,  "
			+ " A.STATUS,A.EARLIEST_DELIVERY_DATE,A.EXPECTED_DELIVERY_DATE,A.REQUESTED_DELIVERY_DATE, A.modifyts, A.order_type,  "
			+ " A.ORDER_NO_1,A.ITEM, A.WH_NAME,A.QTY_ORDERED,A.QTY_RECEIVED,A.QTY_OPEN,A.REV_ETA_DATE,A.QTY_CANCELLED  "
			+ " FROM WSI_PO_STER_RMS_DATA_1 A,  "
			+ " (SELECT ORDER_NO,  "
			+ " ITEM_ID,  "
			+ " NODE,  "
			+ " STATUS_1,  "
			+ " SUM(STATUS_QUANTITY) SUM_QUANTITY  "
			+ " FROM WSI_PO_STER_RMS_DATA_1  "
			+ " where status_1 = 'OPEN'  "
			+ " GROUP BY ORDER_NO,  "
			+ " ITEM_ID,  "
			+ " NODE,  "
			+ " STATUS_1, rev_eta_date) D  "
			+ " WHERE  "
			+ " a.ORDER_NO = D.ORDER_NO  "
			+ " AND A.ITEM_ID = D.ITEM_ID   "
			+ " and a.status_1 = d.status_1";

	public static String WSI_RMS_PO_ETA_MISMATCH = " CREATE TABLE WSI_RMS_PO_ETA_MISMATCH AS SELECT * FROM (  "
			+ " SELECT distinct  "
			+ " ORDER_HEADER_KEY, ORDER_LINE_KEY, ORDERED_QTY-sum_quantity as QTY, ORDER_NO,  "
			+ " ITEM_ID ,  "
			+ " NODE,  "
			+ " SUM_QUANTITY,  "
			+ " STATUS_QUANTITY,  "
			+ " STATUS,  "
			+ " MODIFYTS,  "
			+ " ORDERED_QTY,  "
			+ " Order_type,  "
			+ " EARLIEST_DELIVERY_DATE,  "
			+ " EXPECTED_DELIVERY_DATE,  "
			+ " REQUESTED_DELIVERY_DATE,  "
			+ " ORDER_NO_1,  "
			+ " ITEM,  "
			+ " WH_NAME,  "
			+ " QTY_ORDERED,  "
			+ " QTY_RECEIVED,  "
			+ " QTY_OPEN,  "
			+ " REV_ETA_DATE,  "
			+ " QTY_CANCELLED,  "
			+ " QTY_ORDERED - QTY_RECEIVED as RMS_OpenQty,  "
			+ " (QTY_ORDERED - QTY_RECEIVED) - SUM_QUANTITY as OpenQtyMisMatch ,  "
			+ " CASE  "
			+ " WHEN status IN ('1100','1100.200','3350')  "
			+ " THEN  "
			+ " CASE  "
			+ " WHEN SUM_QUANTITY = QTY_OPEN  "
			+ " THEN 'OPEN QTY MATCHED'  "
			+ " ELSE 'OPEN QTY NOT MATCHED'  "
			+ " END  "
			+ " WHEN status='3900'  "
			+ " THEN  "
			+ " CASE  "
			+ " WHEN SUM_QUANTITY = QTY_RECEIVED  "
			+ " THEN 'RECEIVED QTY MATCHED'  "
			+ " ELSE 'RECEIVED NOT MATCHED'  "
			+ " END  "
			+ " WHEN status='9000'  "
			+ " THEN  "
			+ " CASE  "
			+ " WHEN SUM_QUANTITY = QTY_CANCELLED  "
			+ " THEN 'CANCELLED QTY MATCHED'  "
			+ " ELSE 'CANCELLED NOT MATCHED'  "
			+ " END  "
			+ " WHEN status='9000'  "
			+ " THEN  "
			+ " CASE  "
			+ " WHEN SUM_QUANTITY = QTY_CANCELLED  "
			+ " THEN 'CANCELLED QTY MATCHED'  "
			+ " ELSE 'CANCELLED NOT MATCHED'  "
			+ " END  "
			+ " END AS QTY_RESULT,  "
			+ " CASE  "
			+ " WHEN trunc(EXPECTED_DELIVERY_DATE) = to_date(REV_ETA_DATE,'MM/dd/YYYY')  "
			+ " THEN 'ETA MATCHED'  "
			+ " ELSE  "
			+ " 'ETA NOT MATCHED'  "
			+ " END AS ETA_RESULT,  "
			+ " CASE  "
			+ " WHEN NODE = SUBSTR(replace(WH_NAME, chr(32), ''),3)  "
			+ " THEN 'NODE MATCHED'  "
			+ " ELSE  "
			+ " 'NODE NOT MATCHED'  "
			+ " END AS NODE_RESULT  "
			+ " FROM WSI_PO_QTY_STER_RMS_1)  "
			+ " WHERE  "
			+ " (  "
			+ " ETA_RESULT LIKE '%NOT%'  "
			+ " )  "
			+ " ORDER BY 4,5 ";

	public static String WSI_RMS_PO_ETA_MISMATCH_FINAL = " SELECT * "
			+ " FROM "
			+ "   (SELECT "
			+ "     ROUND((to_date(d.REV_ETA_DATE,'MM/dd/YYYY') - d.expected_delivery_date),2) diff_exp, "
			+ "     to_date(d.REV_ETA_DATE,'MM/dd/YYYY')- to_date(d.REQUESTED_DELIVERY_DATE,'dd-MM-YY') diff_req, "
			+ "     d.STATUS_QUANTITY-rms_openqty STATUS_QTY, "
			+ "     SUM_QUANTITY-rms_openqty SUM_STATUS_QTY, " + "     d.* "
			+ "   FROM WSI_RMS_PO_ETA_MISMATCH d "
			+ "   WHERE order_type <> 'DES_STUDIO' "
			+ "   AND node_result   = 'NODE MATCHED' "
			+ "   AND d.ETA_RESULT  = 'ETA NOT MATCHED' "
			+ "   AND d.MODIFYTS    < TRUNC(sysdate-1) " + "   ) "
			+ " WHERE status_qty   = 0 " + " OR (status_qty    <> 0 "
			+ " AND sum_status_qty = 0) "
			+ " and (status = '3350' and abs(diff_exp) > 1) "
			+ " or (status in ('1100','1100.200') and abs(diff_req) > 1) ";

	public static String CLE_UPDATE_EXCEPTION = "SELECT to_char(app_ex.exception_timestamp,'YYYY-MM-DD HH24:MI:SS') TIME_STAMP "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POUpdate/Order/@ModificationReasonCode') as xml_ModificationReasonCode "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POUpdate/Order/@OrderDate') as xml_OrderDate "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POUpdate/Order/@OrderNo') as xml_OrderNo "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POUpdate/Order/OrderLines/OrderLine[1]/@ModificationReasonText') as xml_ModificationReasonText "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POUpdate/Order/OrderLines/OrderLine[1]/@OrderedQty') as xml_OrderedQty "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POUpdate/Order/OrderLines/OrderLine[1]/@PrimeLineNo') as xml_PrimeLineNo "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POUpdate/Order/OrderLines/OrderLine[1]/@ReceivingNode') as xml_ReceivingNode "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POUpdate/Order/OrderLines/OrderLine[1]/@ReqDeliveryDate') as xml_ReqDeliveryDate "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POUpdate/Order/OrderLines/OrderLine[1]/Item/@ItemID') as xml_ItemID "
			+ " , extractvalue(XMLTYPE(payload.payload), '//POUpdate/Order/OrderLines/OrderLine[1]/Extn/@ExtnRMSOrderQty') as xml_ExtnRMSOrderQty "
			+ " , app_ex.transactionid PO_NUMBER "
			+ " , iface.interfacename, app_ex.msg, app_ex.appexceptionid , app_ex.payloadid, payload.payload PAYLOAD "
			+ " from cle_owner.app_exception app_ex, cle_owner.cf_interface iface, cle_owner.cf_application application, cle_owner.app_payloadarchive payload "
			+ " where app_ex.exception_timestamp between trunc(sysdate-15) and trunc(sysdate) "
			+ " and app_ex.interfaceid = iface.interfaceid "
			+ " and iface.appid = application.appid "
			+ " and payload.payloadid = app_ex.payloadid "
			+ " and application.appcode in ('STERLING') "
			+ " and iface.interfacecode in ('POCOMPOSITEUPDATE','POUPDATE') "
			+ " and app_ex.statusflag = 'Open' "
			+ " ORDER BY iface.interfacename ";

	public static String STR_PO_DATA_4_UPDATE_LOCK = " SELECT * " + " FROM "
			+ "   ( SELECT DISTINCT TMP.INTERFACENAME, " + "     TMP.MSG, "
			+ "     TMP.XML_MODIFICATIONREASONCODE, "
			+ "     TMP.XML_MODIFICATIONREASONTEXT, "
			+ "     TMP.XML_ORDERDATE, " + "     TMP.XML_REQDELIVERYDATE , "
			+ "     TMP.PO_NUMBER, " + "     TMP.XML_ITEMID, "
			+ "     TMP.XML_PRIMELINENO, " + "     TMP.XML_ORDEREDQTY, "
			+ "     TMP.XML_RECEIVINGNODE , "
			+ "     ORD.ORDERED_QTY STR_ORDERED_QTY, "
			+ "     ORD.STATUS_QUANTITY, " + "     ORD.STATUS , "
			+ "     TMP.PAYLOADID, "
			+ "     DBMS_LOB.SUBSTR(TMP.PAYLOAD_XML,4000) " + "   FROM "
			+ "     (SELECT temp.* FROM PO_EXP_REPROCESS_UPDATE_1 temp "
			+ "     ) TMP " + "   LEFT JOIN " + "     (SELECT oh.order_no, "
			+ "       ol.prime_line_no, " + "       ol.ordered_qty, "
			+ "       st.description status, " + "       ol.item_id, "
			+ "       ors.status_quantity " + "     FROM yantra_owner.yfs_order_header oh, "
			+ "       yantra_owner.yfs_order_release_status ors, "
			+ "       yantra_owner.yfs_order_line ol, " + "       yantra_owner.yfs_status st "
			+ "     WHERE oh.order_header_key = ors.order_header_key "
			+ "     AND ol.order_header_key   = oh.order_header_key "
			+ "     AND ol.order_line_key     = ors.order_line_key "
			+ "     AND ors.status            = st.status "
			+ "     AND st.process_type_key   = 'PO_FULFILLMENT' "
			+ "     AND ors.status_quantity   > 0 " + "     ) ORD "
			+ "   ON ORD.ORDER_NO       = TMP.XML_ORDERNO "
			+ "   AND trim(ORD.ITEM_ID) = TMP.XML_ITEMID "
			+ "   AND ORD.PRIME_LINE_NO = TMP.XML_PRIMELINENO " + "   ) "
			+ " WHERE msg = 'Lock timeout detected by the database.' ";

	public static String STR_PO_DATA_4_UPDATE_NOT_ENOUGH_QTY = " SELECT SUBSTR((XMLElement(\"API\",XMLAttributes('changeOrder' AS \"Name\") ,XMLElement(\"Input\",XMLElement(\"Order\", XMLAttributes ('Y' AS \"Override\", PO.OHK AS \"OrderHeaderKey\") ,XMLElement(\"OrderLines\" ,XMLElement(\"OrderLine\",XMLAttributes('Modify' AS \"Action\", PO.OLK AS \"OrderLineKey\", PO.XML_ORDEREDQTY AS \"OrderedQty\") )))))), 0,300) XML "
			+ " FROM "
			+ "   (SELECT DISTINCT oh.order_header_key OHK, "
			+ "     ol.order_line_key OLK, "
			+ "     oh.order_no, "
			+ "     ol.prime_line_no, "
			+ "     temp.xml_primelineno, "
			+ "     trim(ol.item_id) Item_id , "
			+ "     ol.ordered_qty str_ordered_qty, "
			+ "     temp.xml_orderedqty, "
			+ "     ors.status_quantity, "
			+ "     st.description "
			+ "   FROM yantra_owner.yfs_order_header oh, "
			+ "     yantra_owner.yfs_order_release_status ors, "
			+ "     yantra_owner.yfs_order_line ol, "
			+ "     yantra_owner.yfs_status st, "
			+ "     PO_EXP_REPROCESS_UPDATE_1 temp "
			+ "   WHERE oh.order_header_key   = ors.order_header_key "
			+ "   AND ol.order_header_key     = oh.order_header_key "
			+ "   AND ol.order_line_key       = ors.order_line_key "
			+ "   AND ors.status              = st.status "
			+ "   AND oh.order_no             = temp.po_number "
			+ "   AND trim(ol.item_id)        = temp.xml_itemid "
			+ "   AND ol.prime_line_no        = temp.xml_primelineno "
			+ "   AND trim(ol.receiving_node) = temp.xml_receivingnode "
			+ "   AND st.process_type_key     = 'PO_FULFILLMENT' "
			+ "   AND ors.status_quantity     > 0 "
			+ "   AND st.description NOT     IN ('Received','Cancelled') "
			+ "   AND temp.msg                = 'YFS: Not Enough Quantity' "
			+ "   AND ol.ordered_qty         <> temp.xml_orderedqty "
			+ "   ) PO ";

	public static String STR_PO_DATA_4_UPDATE_QTY_G8_THAN_SHIPMENT = "SELECT PAYLOAD_XML FROM PO_EXP_REPROCESS_UPDATE_1 where msg= 'Quantity greater than the allowed over shipment percentage limit'";

	public static String STR_PO_DATA_4_UPDATE_SHIPMENT_4_CANCELLED_LINE = "SELECT PAYLOAD_XML FROM PO_EXP_REPROCESS_UPDATE_1 where msg= 'Shipment line cannot be created for the canceled order line.'";

	public static String STR_WRONG_LOC_DATA_1= "select substr( XMLElement(\"API\", XMLAttributes('updateFutureInventory' as \"Name\"),XMLElement(\"Input\" ,XMLElement(\"ShipNode\",XMLAttributes('N' as \"RemoveAllPreviousInformation\",trim(Temp.ShipNode) as \"ShipNode\"),XMLElement(\"Item\", XMLAttributes(trim(Temp.ItemID) as \"ItemID\", trim(Temp.OrgCode) as \"OrganizationCode\", 'EACH' as \"UnitOfMeasure\"),XMLELEMENT(\"Remove\",XMLELEMENT(\"SupplyDetails\", XMLAttributes(trim(Temp.SupplyReference) as \"SupplyReference\", 'FromWH' as \"SupplyReferenceType\", 'TRANSFER_RESERVE.ex' as \"SupplyType\"))))))),0,400) xml"
			+ " from "
			+ " (select i.item_id ItemID, i.organization_code OrgCode, s.shipnode_key ShipNode, s.supply_reference SupplyReference"
			+ " from yantra_owner.yfs_inventory_supply s, yantra_owner.yfs_inventory_item i where "
			+ " i.inventory_item_key=s.inventory_item_key and s.supply_type='TRANSFER_RESERVE.ex' and s.quantity<0) Temp";
	
	
	public static String STR_WRONG_LOC_DATA_2= "select substr( XMLElement(\"API\", XMLAttributes('updateFutureInventory' as \"Name\"),XMLElement(\"Input\" ,XMLElement(\"ShipNode\",XMLAttributes('N' as \"RemoveAllPreviousInformation\",trim(Temp.ShipNode) as \"ShipNode\"),XMLElement(\"Item\", XMLAttributes(trim(Temp.ItemID) as \"ItemID\", trim(Temp.OrgCode) as \"OrganizationCode\", 'EACH' as \"UnitOfMeasure\"),XMLELEMENT(\"Remove\",XMLELEMENT(\"SupplyDetails\", XMLAttributes(trim(Temp.SupplyReference) as \"SupplyReference\", 'FromWH' as \"SupplyReferenceType\", 'TRANSFER_RESERVE.ex' as \"SupplyType\"))))))),0,400) xml"
			+ " from "
			+ " (SELECT rt.item_id ItemID, rt.organization_code OrgCode, rt.shipnode_key ShipNode, rt.supply_reference SupplyReference"
			+ " FROM tr_t_2 rt WHERE NOT EXISTS"
			+ " (SELECT NULL FROM held_t_2 ht WHERE rt.item_id = ht.item_id and trim(rt.shipnode_key)=trim(ht.supply_reference) and trim(rt.supply_reference)=trim(ht.shipnode_key))) Temp";
	


	public static String STR_WRONG_LOC_DATA_3="select substr( XMLElement(\"API\", XMLAttributes('updateFutureInventory' as \"Name\"),XMLElement(\"Input\",XMLElement(\"ShipNode\",XMLAttributes('N' as \"RemoveAllPreviousInformation\",trim(Temp.ShipNode) as \"ShipNode\"),XMLElement(\"Item\", XMLAttributes(trim(Temp.ItemID) as \"ItemID\", trim(Temp.OrgCode) as \"OrganizationCode\", 'EACH' as \"UnitOfMeasure\"),XMLELEMENT(\"Augment\",XMLELEMENT(\"SupplyDetails\", XMLAttributes(trim(Temp.SupplyReference) as \"SupplyReference\", 'FromWH' as \"SupplyReferenceType\", 'TRANSFER_RESERVE.ex' as \"SupplyType\", 'Y' as Tracked, Temp.Quantity as \"Quantity\", (sysdate+4) as \"ETA\" ))))))),0,400) xml"
			+ " from "
			+ " (SELECT ht.item_id ItemID, ht.organization_code OrgCode, ht.supply_reference ShipNode, ht.shipnode_key SupplyReference, ht.ht_qty Quantity"
			+ " FROM held_t_2 ht WHERE NOT EXISTS " 
			+ " (SELECT NULL FROM tr_t_2 rt WHERE rt.item_id = ht.item_id and trim(rt.shipnode_key)=trim(ht.supply_reference) and trim(rt.supply_reference)=trim(ht.shipnode_key))"
			+ " and supply_reference<> ' ' and ht.ht_qty<>'0') Temp";
			
			
	public static String STR_WRONG_LOC_DATA_4= "select ht.item_id, ht.organization_code, tr.shipnode_key, tr.supply_reference, ht.ht_qty-tr.tr_qty as qty from held_t_2 ht, tr_t_2 tr where ht.item_id=tr.item_id and"
			+ " trim(ht.shipnode_key)=trim(tr.supply_reference) and trim(ht.supply_reference)=trim(tr.shipnode_key) and trim(ht.ht_qty)<>trim(tr.tr_qty)";

	
	
	public static String HELD_TRANSFER_TEMP_CHECK= " CREATE TABLE HELD_TRANSFER_TEMP_CHECK as"
			+ " (select i.item_id,i.organization_code,s.* from yantra_owner.yfs_inventory_supply s, yantra_owner.yfs_inventory_item i"
			+ " where s.inventory_item_key = i.inventory_item_key and s.supply_type='HELD_TRANSFER.ex')";
	
	
	public static String TRANSFER_RESERVE_TEMP_CHECK= "CREATE TABLE TRANSFER_RESERVE_TEMP_CHECK as "
			+ " (select i.item_id,i.organization_code,s.* from yantra_owner.yfs_inventory_supply s, yantra_owner.yfs_inventory_item i"
			+ " where s.inventory_item_key = i.inventory_item_key and s.supply_type='TRANSFER_RESERVE.ex')";
	
	public static String held_t_2= "CREATE TABLE held_t_2 as "
			+ " (select item_id, organization_code, shipnode_key, supply_reference, sum(quantity) as "
			+ " ht_qty from HELD_TRANSFER_TEMP_CHECK group by item_id, organization_code, shipnode_key, supply_reference)";
	
	public static String tr_t_2= "create table tr_t_2 as "
			+ " (select item_id, organization_code, shipnode_key, supply_reference, sum(quantity) as tr_qty "
			+ " from TRANSFER_RESERVE_TEMP_CHECK group by item_id, organization_code, shipnode_key, supply_reference)";	
			


			
public static String dupl_order_today= "";

public static String dup_name_tl_today= "";

public static String New_dup_Order_tl_today= "";

public static String tt_today= "";

public static String dup_order2= "";

public static String ship_address_key= "";
			
public static String FetchReport_SQL= "";	
	

}
